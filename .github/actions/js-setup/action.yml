name: "Setup JS"
description: "Install JS toolchain and dependencies (node_modules)"

runs:
  using: "composite"

  steps:
    # https://github.com/actions/setup-node
    - name: Install Node.js
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
      with:
        node-version-file: ".nvmrc"

    - name: Use corepack to activate pnpm
      run: npm i -g corepack@0.31.0 && corepack enable
      shell: bash

    - name: Audit dependencies (before installing anything)
      # Ignore "low" and "moderate" advisories for now.
      run: pnpm audit --audit-level high
      shell: bash

    - name: Get pnpm store directory (for caching)
      id: pnpm-cache-dir
      run: |
        echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      shell: bash

    # https://github.com/actions/cache
    - name: Setup pnpm store cache
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: ${{ steps.pnpm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5

    - name: Audit the lockfiles to catch peer dependency issues
      run: pnpm install -r --lockfile-only
      shell: bash

    - name: Install dependencies
      run: pnpm install -r --frozen-lockfile
      shell: bash

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@82dee4ba654bd2146511f85f0d013af94670c4de # v1.4.0
      with:
        version: stable
        cache: true
        cache-key: ${{ runner.os }}-foundry-stable
        cache-restore-keys: |
          linux-foundry-chain-fork-${{ runner.os }}-foundry-stable
          linux-foundry-chain-fork-${{ runner.os }}-foundry-stable-
          linux-foundry-chain-fork-
      env:
        ACTIONS_CACHE_DEBUG: true

    - name: Debug Foundry cache
      run: |
        echo "Foundry binary location:"
        ls -la ~/.foundry/bin || echo "No Foundry binary found in ~/.foundry/bin"
        echo "Checking PATH for Foundry binaries:"
        which anvil || echo "anvil not found"
        which forge || echo "forge not found"
        which cast || echo "cast not found"
        echo "PATH contents:"
        echo $PATH
        echo "All binaries in PATH:"
        find $(echo $PATH | tr ':' ' ') -maxdepth 1 -type f -executable 2>/dev/null || echo "Error searching PATH"
        anvil --version || echo "anvil not installed"
      shell: bash
